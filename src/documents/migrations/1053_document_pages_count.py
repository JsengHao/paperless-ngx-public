# Generated by Django 4.2.16 on 2024-09-21 15:44

import datetime
from pathlib import Path

import pikepdf
from django.conf import settings
from django.db import migrations
from django.db import models
from django.utils import timezone
from django.utils.termcolors import colorize as colourise

from documents.parsers import get_default_file_extension


class Document:
    """
    Django's migrations restrict access to model methods, so this is a snapshot
    of the methods that existed at the time this migration was written, since
    we need to make use of a lot of these shortcuts here.
    """

    def __init__(self, doc):
        self.pk = doc.pk
        self.correspondent = doc.correspondent
        self.title = doc.title
        self.mime_type = doc.mime_type
        self.filename = doc.filename
        self.created = doc.created

    def __str__(self) -> str:
        # Convert UTC database time to local time
        created = datetime.date.isoformat(timezone.localdate(self.created))

        res = f"{created}"

        if self.correspondent:
            res += f" {self.correspondent}"
        if self.title:
            res += f" {self.title}"
        return res

    @property
    def file_type(self):
        return get_default_file_extension(self.mime_type)

    @property
    def source_path(self) -> Path:
        if self.filename:
            fname = str(self.filename)
        return (settings.ORIGINALS_DIR / Path(fname)).resolve()


def add_number_of_pages_to_pages_count(apps, schema_editor):
    documentModel = apps.get_model("documents", "Document")

    if not documentModel.objects.all().exists():
        return

    for doc in documentModel.objects.filter(mime_type="application/pdf"):
        document = Document(doc)

        print(
            "    {} {} {}".format(
                colourise("*", fg="green"),
                colourise("Calculating number of pages for", fg="white"),
                colourise(document.filename, fg="cyan"),
            ),
        )

        pdf = pikepdf.open(document.source_path)

        if pdf.pages is not None:
            doc.pages_count = len(pdf.pages)
            doc.save()


def remove_number_of_pages_to_pages_count(apps, schema_editor):
    documentModel = apps.get_model("documents", "Document")

    if not documentModel.objects.all().exists():
        return

    for document in documentModel.objects.filter(mime_type="application/pdf"):
        document.pages_count = 0
        document.save()


class Migration(migrations.Migration):
    dependencies = [
        ("documents", "1052_document_transaction_id"),
    ]

    operations = [
        migrations.AddField(
            model_name="document",
            name="pages_count",
            field=models.PositiveIntegerField(
                blank=False,
                null=True,
                unique=False,
                db_index=False,
            ),
        ),
        migrations.RunPython(
            add_number_of_pages_to_pages_count,
            remove_number_of_pages_to_pages_count,
        ),
    ]
